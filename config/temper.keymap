/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define QWERTY 0
#define NUM 1
#define NAV 2
#define FUN 3

/ {
    conditional_layers { compatible = "zmk,conditional-layers"; };

    behaviors {
        bspc_del: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_RSFT)>;
        };

        super_bspc: super_backspace {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp LA(BACKSPACE)>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        smart_shft: smart_shift {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LSHFT>, <&caps_word>;

            mods = <(MOD_LSFT)>;
        };

        comma_semi: comma_semi {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMI>;

            mods = <(MOD_LSFT)>;
        };

        dot_colon: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COLON>;

            mods = <(MOD_LSFT)>;
        };

        qmrk_excl: qmrk_excl {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp QMARK>, <&kp EXCL>;

            mods = <(MOD_LSFT)>;
        };

        slh_morph: slh_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp FSLH>, <&kp BSLH>;

            mods = <(MOD_LSFT)>;
        };

        amps_morph: amps_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp AMPS>, <&kp PIPE>;

            mods = <(MOD_LSFT)>;
        };

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow_mods";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
        };

        ltq: ltq {
            compatible = "zmk,behavior-hold-tap";
            label = "LTQ";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <180>;
        };
    };

    combos {
        compatible = "zmk,combos";

        left_bkt {
            bindings = <&kp LBKT>;
            key-positions = <2 3>;
        };

        right_bkt {
            bindings = <&kp RBKT>;
            key-positions = <6 7>;
        };

        left_par {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <12 13>;
        };

        right_par {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <16 17>;
        };

        left_prc {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <22 23>;
        };

        right_prc {
            bindings = <&kp RBRC>;
            key-positions = <26 27>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <14 15>;
        };

        blsh {
            bindings = <&kp BSLH>;
            key-positions = <4 5>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <18 19>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        qwerty_layer {
            display-name = "QWERTY";
            bindings = <
  &kp Q        &kp W           &kp E           &kp R             &kp T        &kp Y            &kp U              &kp I            &kp O            &kp P
  &hm LCTRL A  &hm LEFT_WIN S  &hm LEFT_ALT D  &hm LEFT_SHIFT F  &kp G        &kp H            &hm RIGHT_SHIFT J  &hm RIGHT_ALT K  &hm RIGHT_WIN L  &hm RCTRL SEMICOLON
  &kp Z        &kp X           &kp C           &kp V             &kp B        &kp N            &kp M              &kp COMMA        &kp DOT          &mt RSHFT SLASH
                               &kp ESCAPE      &kp SPACE         &lt 1 TAB    &lt 2 BACKSPACE  &kp ENTER          &kp DELETE
            >;
        };

        num_layer {
            display-name = "NUM";
            bindings = <
  &kp N1        &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5    &kp MINUS      &kp EQUAL       &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp BACKSLASH
  &kp NUMBER_6  &kp N7        &kp N8        &kp N9        &kp N0    &none          &kp TILDE       &none                 &kp LS(SQT)            &kp SQT
  &kp GRAVE     &none         &none         &none         &none     &kp LS(MINUS)  &kp LS(EQUAL)   &kp LS(LEFT_BRACKET)  &kp LS(RIGHT_BRACKET)  &kp LS(BACKSLASH)
                              &kp LEFT_ALT  &trans        &trans    &mo 3          &kp LEFT_SHIFT  &kp RWIN
            >;
        };

        nav_layer {
            display-name = "NAV";
            bindings = <
  &kp ESC   &trans  &trans  &trans  &trans    &kp PG_UP  &kp HOME        &kp UP_ARROW     &kp END     &super_bspc
  &kp CAPS  &none   &none   &trans  &trans    &kp PG_DN  &kp LEFT        &kp DOWN         &kp RIGHT   &gresc
  &kp DEL   &trans  &trans  &trans  &trans    &kp PSCRN  &kp SCROLLLOCK  &kp PAUSE_BREAK  &kp INSERT  &trans
                    &trans  &trans  &mo 3     &trans     &trans          &trans
            >;
        };

        fun_layer {
            display-name = "FUN";
            bindings = <
  &none         &kp K_MUTE    &kp C_VOL_DN  &kp C_VOL_UP  &out OUT_TOG    &trans  &kp F1  &kp F2   &kp F3   &kp F4
  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans  &kp F5  &kp F6   &kp F7   &kp F8
  &bt BT_CLR    &kp C_PREV    &kp C_PP      &kp C_NEXT    &trans          &trans  &kp F9  &kp F10  &kp F11  &kp F12
                              &trans        &trans        &trans          &trans  &trans  &trans
            >;
        };
    };
};
